<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://losetime.github.io</id>
    <title>losetime</title>
    <updated>2021-04-08T08:12:03.365Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://losetime.github.io"/>
    <link rel="self" href="https://losetime.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://losetime.github.io/images/avatar.png</logo>
    <icon>https://losetime.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, losetime</rights>
    <entry>
        <title type="html"><![CDATA[工厂模式]]></title>
        <id>https://losetime.github.io/JaZg9Vp1b/</id>
        <link href="https://losetime.github.io/JaZg9Vp1b/">
        </link>
        <updated>2021-04-08T07:39:17.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h3 id="思路">💡<strong>思路</strong></h3>
<ol>
<li>创建需要批量的构造函数</li>
<li>通过工厂中间函数，根据一些固定的输入模式，返回相应的输出</li>
</ol>
</li>
<li>
<h3 id="实现">🔨<strong>实现</strong></h3>
<pre><code>function Student(name, subjects){
    this.name = name
    this.subjects = subjects
}
function factory(name, type){
    switch(type){
        case '文科':
        return new Student(name, ['历史','政治','地理'])
        break
        case '理科':
        return new Student(name, ['物理','化学','生物'])
        default:
        throw &quot;找不到该专业&quot;
    }
}
let zs = factory('张三','文科')
let ls = factory('李四','理科')
console.log(zs)
console.log(ls)
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[单例模式]]></title>
        <id>https://losetime.github.io/C3YhUQ-e1/</id>
        <link href="https://losetime.github.io/C3YhUQ-e1/">
        </link>
        <updated>2021-04-08T07:10:28.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h3 id="思路">💡<strong>思路</strong></h3>
<ol>
<li>单例模式其实就是把实例对象保存在了构造函数的一个属性里，每次实例化时判断该属性是否存在</li>
<li>如果存在直接返回</li>
<li>如果不存在，则创建</li>
</ol>
</li>
<li>
<h3 id="实现">🔨<strong>实现</strong></h3>
<pre><code>function Resource(){
    if(Resource.instance){
        return Resource.instance
    } else {
        this.balance = 100
        Resource.instance = this
    }
}
let r = new Resource()
console.log(r)
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[实现一个简易的EventEmiter]]></title>
        <id>https://losetime.github.io/f4IwdXoTH/</id>
        <link href="https://losetime.github.io/f4IwdXoTH/">
        </link>
        <updated>2021-04-08T03:43:28.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<h3 id="思路梳理"><strong>思路梳理</strong></h3>
<ol>
<li>首先要有一个对象，存储触发事件，大概长下面这个样子</li>
</ol>
<pre><code>let handles = {
    event1: [] // 数组里存放的是回调函数
    event2: []
}
</code></pre>
<ol start="2">
<li>在监听阶段，我们需要把所有的触发事件收集起来</li>
<li>在触发阶段，则把所有的存在handles里的事件拿出来分别执行</li>
</ol>
</li>
<li>
<h3 id="代码实现"><strong>代码实现</strong></h3>
<pre><code>function Event(){
  this.handles = {}
}
Event.prototype.on = function(evName, callback){
  if(!this.handles[evName]){
    this.handles[evName] = []
  }
  this.handles[evName].push(callback)
}
Event.prototype.emit = function(evName, ...args){
  const handle = this.handles[evName]
  if(handle){
    for(let i=0,len=handle.length;i&lt;len;i++){
      handle[i](...args)
    }
  }
}
let event = new Event()
event.on('step', (...args)=&gt;{console.log(...args)})
event.emit('step', 10, 'huahua')
event.emit('step', 20, 'xiaoming')

function Child(){}
Child.prototype = new Event()
let child = new Child()
child.on('step', (...args)=&gt;{console.log(...args)})
child.emit('step', 30, '二狗子')
child.emit('step', 90, '法外狂徒张三')
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[排序算法]]></title>
        <id>https://losetime.github.io/kuai-su-pai-xu/</id>
        <link href="https://losetime.github.io/kuai-su-pai-xu/">
        </link>
        <updated>2021-04-02T14:06:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-快速排序">1. 快速排序</h2>
<figure data-type="image" tabindex="1"><img src="https://losetime.github.io/post-images/1617375144226.png" alt="" loading="lazy"></figure>
<pre><code>function quickSort(arr, l, r){
  if(l&gt;=r) return arr
  let left = l // 左指针!
  let right = r //右指针
  let pivot = arr[left] // 基准值
  // 开启排序
  while(left &lt; right){  // 如果左指针小于右指针，才能继续，否则说明两个指针相遇了
    while(arr[left]&lt;pivot &amp;&amp; left&lt;right){
      left++
    }
    while(arr[right]&gt;pivot &amp;&amp; left&lt;right){
      right--
    }
    if(left&lt;right){
      [arr[left],arr[right]] = [arr[right],arr[left]]
    } else {
      arr[left]=pivot
    }
  }
  quickSort(arr, l, left-1)
  quickSort(arr, left+1, r)
  return arr
}
let sortArr = [2,1,4,3,9,12,100,201,29,80,72,92,54,32,23]
console.log(quickSort(sortArr, 0, sortArr.length-1))
</code></pre>
<h2 id="2-归并排序">2. 归并排序</h2>
<figure data-type="image" tabindex="2"><img src="https://upload-images.jianshu.io/upload_images/7789414-2737ec30a70ff74f.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/811/format/webp" alt="" loading="lazy"></figure>
<pre><code>function mergeSort(arr){
    if(arr.length &lt;= 1){
        return arr
    }
    let middle = Math.floor(arr.length / 2)
    let left = arr.slice(0, middle)
    let right = arr.slice(middle)
    return merge(mergeSort(left), mergeSort(right))
}
function merge(left, right){
    let result = []
    while(left.length &gt; 0 &amp;&amp; right.length &gt; 0){
        if(left[0]&lt;right[0]){
        result.push(left.shift())
        }else {
        result.push(right.shift())
        }
    }
    return result.concat(left).concat(right)
}
</code></pre>
<h2 id="3-计数排序">3. 计数排序</h2>
<ul>
<li><strong>主要思想</strong></li>
</ul>
<ol>
<li>通过定义一个目标数组内最大值和最小值区间长度的新数组</li>
<li>把目标数组的值分别放入该数组对应的下标</li>
<li>每次该数组下标对应的值要加1</li>
<li>最后就会形成下面这样一个数组<br>
<img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/NtO5sialJZGroCH0m1FU64Lsj1SVicZJ1pSiceib25REaIym1v2xlB8y6Pm9OSvjZ2JXbVQwU1JibeibtEFCOO6icpZpw/640?wx_fmt=png" alt="" loading="lazy"></li>
<li>这个数组已经是排好序的，我们通过循环取出下标，下标所对应的值则是该下标出现的次数</li>
</ol>
<ul>
<li><strong>注意</strong></li>
</ul>
<ol>
<li>计数排序是唯一一种时间复杂度可以达到O(n)的排序算法</li>
</ol>
<pre><code>function countSort(arr){
    let maxNum = Math.max(...arr)
    let minNum = Math.min(...arr)
    let counter = new Array(maxNum - minNum + 1).fill(0)
    let result = []
    for(let i=0;i&lt;arr.length;i++){
        counter[arr[i]] = counter[arr[i]]+1
    }
    for(let i=0;i&lt;counter.length;i++){
        result = result.concat(new Array(counter[i]).fill(i))
    }
    return result
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[实现一个任务队列]]></title>
        <id>https://losetime.github.io/shi-xian-yi-ge-ren-wu-dui-lie/</id>
        <link href="https://losetime.github.io/shi-xian-yi-ge-ren-wu-dui-lie/">
        </link>
        <updated>2019-07-16T03:00:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1promise实现任务队列">1.promise实现任务队列</h1>
<ul>
<li>promise.then如果遇到没有返回值，那么默认就会把undefined包装成promise后返回，然后继续向下执行</li>
<li>我们在返回值里 返回一个新的promise，那么第一层的promise就会等到这内部的promise执行完毕后才会返回</li>
<li>而内部的promise什么时候执行完成，就依赖于resolve何时执行，这就达到了任务队列的目的</li>
</ul>
<pre><code>1. forEach版本

function taskQueue(arr){
    let promise = Promise.resolve();
    arr.forEach(item=&gt;{
		//这里需要把返回的Promise实例赋给promise，生成新的队列
        promise = promise.then(()=&gt;{
            return new Promise(resolve=&gt;{
                // do...
                setTimeout(()=&gt;{
                    console.log(item)
                    resolve();
                },2000)
                
            })
        })
    })
}

2. reduce版本

function taskQueue(arr){
    /**
     * reduce方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终返回一个值
     * reduce中callback的返回值会作为下一次的初始值
     reduce参数
     * callback，回调函数
     * initialValue，初始传入值值
     callback参数
     * 1.previousValue,上一次调用回调返回的值，或者是提供的初始值
     * 2.currentValue，数组中当前被处理的元素
     * 3.index,当前元素在数组中的索引
     * 4.array,reduce调用的数组
     */
    arr.reduce((promise,item,index,array)=&gt;{
        return promise.then(()=&gt;{
            return new Promise(resolve=&gt;{
                setTimeout(()=&gt;{
                    console.log(item)
                    resolve();
                },2000)
            })
        })
    },Promise.resolve())
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue CLI Plugin Electron Builder笔记]]></title>
        <id>https://losetime.github.io/vue-cli-plugin-electron-builder-bi-ji/</id>
        <link href="https://losetime.github.io/vue-cli-plugin-electron-builder-bi-ji/">
        </link>
        <updated>2019-07-11T09:23:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1环境变量说明">1.环境变量说明</h3>
<p>vue.js中设置的【生产环境变量】和【线上环境变量】在electron打包是可用的</p>
<h3 id="2隐藏顶部菜单栏">2.隐藏顶部菜单栏</h3>
<figure data-type="image" tabindex="1"><img src="https://losetime.github.io/post-images/1562837171739.png" alt="" loading="lazy"></figure>
<h3 id="3使用electron-build在vue-cli-3中的使用">3.使用electron-build在vue-cli 3中的使用</h3>
<p>文档参考：https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/#installation</p>
<p>安装完毕之后项目里会多出一些文件，其中有一个background.js，关于页面的东西需要去这个当中改</p>
<p>注意事项:node版本必须高于8.12，升级node版本后可以后导致node-sass这个模块的不可用，需要执行【npm rebuild node-sass】去重新绑定</p>
<h3 id="4窗口宽与高的固定">4.窗口宽与高的固定</h3>
<pre><code>win = new BrowserWindow({

    width: 400,

    height: 750,

    maxHeight:750,

    maxWidth: 400,

    webPreferences: {

      nodeIntegration: true

    }

 });
</code></pre>
<h3 id="4应用打包后打开调试工具">4.应用打包后打开调试工具</h3>
<p>方法一（主进程）：</p>
<pre><code>function createWindow (){   

mainWindow = newBrowserWindow({

width:800, 

height:600

})

mainWindow.webContents.openDevTools()

}
</code></pre>
<p>方法二（渲染进程）：</p>
<pre><code>const { remote } = require('electron')

remote.getCurrentWebContents().openDevTools()
</code></pre>
<h3 id="6替换图标">6.替换图标</h3>
<p>1.把图标放在public文件下</p>
<p>2.安装</p>
<p><code>yarn add --dev electron-icon-builder（需要科学上网）</code></p>
<p>3.添加命令：</p>
<p><code>&quot;electron:generate-icons&quot;: &quot;electron-icon-builder --input=./public/icon.png --output=build --flatten&quot;</code></p>
<p>4.生成：</p>
<p><code>yarn electron:generate-icons</code></p>
<p>5.会生成build文件，不要动</p>
<p>6.修改配置</p>
<h3 id="7打包配置科学上网很重要啊">7.打包配置（科学上网很重要啊）</h3>
<p>参考文章：https://www.jianshu.com/p/1dbb96bc8f37<br>
参考文档：https://www.electron.build/configuration/configuration</p>
<pre><code>module.exports = {
  pluginOptions: {
    electronBuilder: {
      builderOptions: {
        appId: &quot;com.example.app&quot;,
        productName: &quot;hsl-Download&quot;, //项目名，也是生成的安装文件名，即hsl-Download
        copyright: &quot;Copyright © 2019&quot;, //版权信息
        directories: {
          output: &quot;./dist&quot; //输出文件路径
        },
        win: {
          //win相关配置
          target: [
            {
              target: &quot;nsis&quot;, //利用nsis制作安装程序
              arch: [
                &quot;x64&quot;, //64位
                &quot;ia32&quot; //32位
              ]
            }
          ]
        },
        nsis: {
          oneClick: false, // 是否一键安装
          allowElevation: true, // 允许请求提升。 如果为false，则用户必须使用提升的权限重新启动安装程序。
          allowToChangeInstallationDirectory: true, // 允许修改安装目录
          installerIcon: &quot;./static/icon.ico&quot;, // 安装图标
          uninstallerIcon: &quot;./static/icon.ico&quot;, //卸载图标
          installerHeaderIcon: &quot;./static/icon.ico&quot;, // 安装时头部图标
          createDesktopShortcut: true, // 创建桌面图标
          createStartMenuShortcut: true, // 创建开始菜单图标
          shortcutName: &quot;hsl-Download&quot; // 图标名称
        }
      }
    }
  }
};
</code></pre>
<h3 id="8注意事项">8.注意事项</h3>
<p>1.mac版本必须在mac电脑电脑上打包</p>
<h3 id="9遇到的错误">9.遇到的错误</h3>
<p>1.打包时项目路径中不能有中文。报错如下：<br>
<img src="https://losetime.github.io/post-images/1563938293861.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二叉树算法原理]]></title>
        <id>https://losetime.github.io/er-cha-shu-suan-fa-yuan-li/</id>
        <link href="https://losetime.github.io/er-cha-shu-suan-fa-yuan-li/">
        </link>
        <updated>2019-04-20T10:21:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-二叉树特点">1.  二叉树特点</h3>
<p>左子树 &lt; 父节点 &lt; 右子树</p>
<h3 id="2-中序遍历">2.  中序遍历</h3>
<p>先遍历左子树，再访问父节点，再遍历右子树, 可以实现从小到大的排序</p>
<h3 id="3-前序遍历">3. 前序遍历</h3>
<p>先访问父节点，再遍历左子树，再遍历右子树  可以实现复制一颗二叉树，比重新构建二叉树快十倍左右</p>
<h3 id="4-后序遍历">4. 后序遍历</h3>
<p>先遍历左子树，再遍历右子树，再访问父节点  可以应用到文件系统的中，先访问它的左右子树，最后来访问这个节点本身</p>
<h3 id="5-二叉树查找">5. 二叉树查找</h3>
<ul>
<li>最小值：递归查找左子树</li>
<li>最大数：递归查找右子树</li>
<li>具体数：先判断大于父节点还是小于父节点，如果小于父节点，进入左子树；如果大于父节点，进入右子树；递归查找</li>
</ul>
<h3 id="6-二叉树子节点的删除最终目标是保持二叉树的排序性">6. 二叉树子节点的删除,最终目标是保持二叉树的排序性</h3>
<h3 id="7具体实现">7.具体实现</h3>
<pre><code>function BinaryTree(){
		this.root = null;
		var Node = function(key){
				this.key = key;
				this.left = null;
				this.right = null;
		}
		var insertNode = function(node,newNode){
				if(newNode.key &lt; node.key){
						if(node.left === null){
								node.left = newNode;
						}else{
								insertNode(node.left,newNode)
						}
				}else{
						if(node.right === null){
								node.right = newNode
						}else{
								insertNode(node.right,newNode)
						}
				}
		}
		this.insert = function(key){
				let node = new Node(key);
				if(this.root === null){
						this.root = node;
				}else {
						insertNode(this.root,node);
				}
		}
		var inOrderTravelNode = function(node,callback){
				if(node!==null){
						inOrderTravelNode(node.left,callback);
						callback(node.key);
						inOrderTravelNode(node.right,callback);
				}
		}
		// 中序遍历
		this.inOrderTravel = function(callback){
				inOrderTravelNode(this.root,callback)
		}
		var searchNode = function(node,key){
				if(node === null){
						console.log(&quot;查找失败&quot;);
				}
				else if(node.key &gt; key){
						searchNode(node.left,key);
				}else if(node.key &lt; key){
						searchNode(node.right,key);
				}else {
						console.log(&quot;找到了&quot;);
				}
		}
		//具体值查找
		this.search = function(key){
				if(this.root !== null){
						searchNode(this.root,key);
				}
		}
		//查找右子树最小节点(也就是当前父节点的右子树的左子树)
		var findMinNode = function(node){
				if(node){
						while(node &amp;&amp; node.left !== null) {
								node = node.left;
						}
						return node;
				}
				return null;
		}
		var that = this;
		var removeNode = function(node,key){
				if(node === null){
						console.log(&quot;查找失败&quot;);
				}
				else if(node.key &gt; key){
						node.left = removeNode(node.left,key);
						return node;
				}else if(node.key &lt; key){
						node.right = removeNode(node.right,key);
						return node;
				}else {
						//没有子节点
						if(node.left === null &amp;&amp; node.right === null){
								node = null;
								console.log(&quot;该节点已删除&quot;);
								return node;
						}
						//一个子节点
						if(node.left === null){
								node = node.right;
								return node;
						} else if(ndoe.right === null) {
								node = node.left;
								return node;
						}
						// 两个子节点，从右子树里找到最小子节点，然后替换父节点的值，并删除这个最小子节点
						var minNode = findMinNode(node.right);
						node.key = minNode.key;
						node.right = removeNode(node.right,minNode);
						return node;
				}
		}
		//删除子节点
		this.remove = function(key){
				this.root = removeNode(this.root,key);
		}
}
let node = [10,3,5,6,7,2,12,4,18,9,1]
let binaryTree = new BinaryTree();
//创建二叉树
node.forEach(key=&gt;{
		binaryTree.insert(key);
})
var callback = function(key){
		console.log(&quot;中序遍历：&quot;+key);
}
// 中序遍历
binaryTree.inOrderTravel(callback);
// 二叉树查找子节点
binaryTree.search(7);
//二叉树删除子节点
binaryTree.remove(1);</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jenkins配置邮件通知]]></title>
        <id>https://losetime.github.io/jenkins-pei-zhi-you-jian-tong-zhi/</id>
        <link href="https://losetime.github.io/jenkins-pei-zhi-you-jian-tong-zhi/">
        </link>
        <updated>2019-04-19T11:09:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-自带邮件配置">1. 自带邮件配置</h2>
<p>打开全局系统配置，配置Jenkins Location，见图。<br>
<img src="https://losetime.github.io/post-images/1555672361973.png" alt="" loading="lazy"><br>
全局系统配置，配置邮件通知，见图。<br>
这里说一下，怎么打开邮箱的SMTP服务，这是QQ邮箱的教程：https://jingyan.baidu.com/article/0f5fb099dffe7c6d8334ea31.html<br>
其他邮箱应该大同小异，可以去找找。不过建议不要用Gmail，会牵扯到科学上网的问题。<br>
<img src="https://losetime.github.io/post-images/1555672404765.png" alt="" loading="lazy"><br>
配置任务构建后操作<br>
打开单项任务的配置-----》构建后操作 ，选择下图<br>
<img src="https://losetime.github.io/post-images/1555672415099.png" alt="" loading="lazy"><br>
写入邮件地址即可，保存<br>
<img src="https://losetime.github.io/post-images/1555672421153.png" alt="" loading="lazy"><br>
收到的邮件如下图，可以看到，这只是构建中打印的日志文件，看起来太费劲。不过，如果你只是想知道构建是否失败了，这个还是可以用的。<br>
<img src="https://losetime.github.io/post-images/1555672428133.png" alt="" loading="lazy"></p>
<h2 id="2-插件extended-e-mail-notification配置">2. 插件Extended E-mail Notification配置</h2>
<p>这个插件增强了邮件功能，使邮件可以自定义，如果没安装就去搜索并安装一下，然后我们一起走一遍过程。</p>
<h3 id="说明一点如果你直接用插件配置是可以不用配置系统自带邮件的这个经过验证">说明一点：如果你直接用插件配置，是可以不用配置系统自带邮件的，这个经过验证。</h3>
<ul>
<li>首先，在系统设置里找到这个插件，然后如图所示配置<br>
<img src="https://losetime.github.io/post-images/1555672636498.png" alt="" loading="lazy"></li>
<li>点开上图【高级...】，配置如下图<br>
<img src="https://losetime.github.io/post-images/1555672660244.png" alt="" loading="lazy"></li>
<li>点开上图【Default Triggers】，根据需要选择发送邮件的条件，可以选择总是，也可以选择其他特殊情况。<br>
<img src="https://losetime.github.io/post-images/1555672664292.png" alt="" loading="lazy"></li>
<li>应用，保存。</li>
<li>打开任务配置，打开【构建后操作】列表<br>
<img src="https://losetime.github.io/post-images/1555672687607.png" alt="" loading="lazy"></li>
<li>设置触发条件<br>
<img src="https://losetime.github.io/post-images/1555672692305.png" alt="" loading="lazy"><br>
<img src="https://losetime.github.io/post-images/1555672696196.png" alt="" loading="lazy"></li>
<li>其他都可以不用动，应用，保存。</li>
<li>逻辑是我们在全局设置了配置好了模板，这边添加一个构建动作，然后执行就可以，也可以在这边配置基于项目的个性化需求。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jenkins的在Liunx系统上的权限问题]]></title>
        <id>https://losetime.github.io/jenkins-de-zai-liunx-xi-tong-shang-de-quan-xian-wen-ti/</id>
        <link href="https://losetime.github.io/jenkins-de-zai-liunx-xi-tong-shang-de-quan-xian-wen-ti/">
        </link>
        <updated>2019-04-19T09:38:20.000Z</updated>
        <content type="html"><![CDATA[<p>由于Jenkins在安装的时候，会自动创建一个名为jenkins的普通账号，这个账号没有管理员权限。jenkins执行命令的时候，它也会使用这个账号。但是由于nginx这个文件夹是用户root创建的，所以jenkins账号默认是没有权限读写这个文件夹的。所以导致构建的项目总是在复制的时候失败。</p>
<h3 id="下来以centos系统为例修改jenkins配置文件">下来以centOS系统为例，修改Jenkins配置文件。</h3>
<ul>
<li>打开配置文件</li>
</ul>
<pre><code>vim /etc/sysconfig/jenkins
</code></pre>
<ul>
<li>修改$JENKINS_USER</li>
</ul>
<pre><code>$JENKINS_USER=&quot;root&quot;
</code></pre>
<ul>
<li>修改Jenkins相关文件夹用户权限</li>
</ul>
<pre><code>chown -R root:root /var/lib/jenkins
chown -R root:root /var/cache/jenkins
chown -R root:root /var/log/jenkins
</code></pre>
<ul>
<li>重启Jenkins服务并检查运行Jenkins的用户是否已经切换为root</li>
</ul>
<pre><code>service jenkins restart
</code></pre>
<ul>
<li>查看Jenkins进程所属用户</li>
</ul>
<pre><code>ps -ef | grep jenkins
</code></pre>
<h3 id="若显示为root用户则表示修改完成">若显示为root用户，则表示修改完成</h3>
<figure data-type="image" tabindex="1"><img src="https://losetime.github.io/post-images/1555669015905.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阿里云CentOS配置Jenkins]]></title>
        <id>https://losetime.github.io/a-li-yun-centos-pei-zhi-jenkins/</id>
        <link href="https://losetime.github.io/a-li-yun-centos-pei-zhi-jenkins/">
        </link>
        <updated>2019-04-19T09:31:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-下载jenkins">1. 下载jenkins</h2>
<pre><code>#下载Jenkins库
wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
#导入key
rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
#安装Jenkins，`-y`参数：回答全部问题为是
yum install -y jenkins
#启动Jenkins服务
systemctl start jenkins   或者   service jenkins start

jenkins的安装地址： /var/lib/jenkins/
Jenkins目录、端口、工作目录等信息在： /etc/sysconfig/jenkins
</code></pre>
<p>注意：</p>
<ul>
<li>要安装java</li>
</ul>
<pre><code>yum install java-1.8.0-openjdk
</code></pre>
<ul>
<li>阿里云的安全组规则，千万要记得把阿里云的安全组规则里加上自己要访问的端口<br>
<img src="https://losetime.github.io/post-images/1555667114420.png" alt="" loading="lazy"></li>
<li>防火墙问题</li>
</ul>
<pre><code>cat   /var/log/jenkins/jenkins.log #查看安装日志安装没有问题
firewall-cmd --add-port=8080/tcp #将设置的端口防火墙关闭
</code></pre>
<h2 id="2-配置jenkis的端口">2. 配置jenkis的端口</h2>
<pre><code>vi /etc/sysconfig/jenkins
找到修改端口号：
JENKINS_PORT=&quot;8080&quot;  此端口不冲突可以不修改 
</code></pre>
<h2 id="3-启动jenkins">3. 启动jenkins</h2>
<pre><code>service jenkins start/stop/restart
</code></pre>
<h2 id="4-生成personal-access-token">4. 生成Personal Access Token</h2>
<p>进入github --&gt; setting --&gt;developers--&gt; Personal Access Token --&gt; Generate new token, 新建一个有读写权限的用户<br>
<img src="https://losetime.github.io/post-images/1555667272755.png" alt="" loading="lazy"><br>
新增一个描述，勾选如图配置，点击生成对应的 token<br>
<img src="https://losetime.github.io/post-images/1555667331338.png" alt="" loading="lazy"></p>
<h2 id="5-设置github-webhooks">5. 设置GitHub Webhooks</h2>
<p>新建或者设置现有项目的webhooks选项，url：你之前部署jenkins的服务器的IP+端口+ github-webhook,填写完成确认添加。<br>
<img src="https://losetime.github.io/post-images/1555667368433.png" alt="" loading="lazy"></p>
<h2 id="6-设置jenkins的全局github配置">6. 设置Jenkins的全局Github配置</h2>
<p>jenkins 安装Github Plugin插件,因为我们在配置jenkins的时候已经安装了所以这里可跳过， 如果没有 key 在jenkins 系统管理--&gt;插件管理--&gt;可选插件中安装。<br>
jenkins 系统管理 --&gt; 系统设置 --&gt; GitHub --&gt; Add GitHub Sever,设置一下jenkins关联 GitHub。<br>
<strong>注意：这里需要使用上面生成的令牌，使用用户名和密码不起作用，设置后选项内不会出现，已经验证过。</strong><br>
<img src="https://losetime.github.io/post-images/1555667469439.png" alt="" loading="lazy"><br>
按照如下图选择添加配置，这个时候就需要用到了我们第一步生成的 GitHub Personal Access Token，填写完毕确认添加<br>
<img src="https://losetime.github.io/post-images/1555667506907.png" alt="" loading="lazy"><br>
选择生成的凭证，测试jenkins连接github服务器,如下图说明一切都配置 ok，最后记得在页面底部保存配置<br>
<img src="https://losetime.github.io/post-images/1555667535586.png" alt="" loading="lazy"></p>
<h2 id="7-jenkins的项目配置">7. jenkins的项目配置</h2>
<ul>
<li>jenkins 新建项目，选择构建自由风格项目<br>
<img src="https://losetime.github.io/post-images/1555668168134.png" alt="" loading="lazy"></li>
<li>完成之后的页面如下，后面我们做关于项目的配置设置都是基于这样页面（后面可以在项目=&gt;配置中找到这个页面）<br>
<img src="https://losetime.github.io/post-images/1555668204875.png" alt="" loading="lazy"></li>
<li>填写GitHub 项目URL<br>
<img src="https://losetime.github.io/post-images/1555668275048.png" alt="" loading="lazy"></li>
<li>源码管理这里连接存储库可能会报错，首先检查服务器上是否安装了git，如果没安装需要安装上，应该可以解决问题，至少我遇到的是这样的。权限用户配置可以使用SSH,也可以HTTP登录名和密码的形式。<br>
<img src="https://losetime.github.io/post-images/1555668364154.png" alt="" loading="lazy"><br>
<img src="https://losetime.github.io/post-images/1555668389837.png" alt="" loading="lazy"><br>
<img src="https://losetime.github.io/post-images/1555668409918.png" alt="" loading="lazy"><br>
<img src="https://losetime.github.io/post-images/1555668427286.png" alt="" loading="lazy"></li>
</ul>
<h2 id="8构建">8.构建</h2>
<p>构建的时候注意看下自己nginx上存放静态资源的地址是否和shell命令中的一致，如果不一致需要改正。<br>
<img src="https://losetime.github.io/post-images/1555668533356.png" alt="" loading="lazy"></p>
<pre><code>echo $PATH  #输出环境变量，可以不要
node -v  #输出node版本 ，可以不要
npm -v #输出npm版本，可以不要
cd /var/lib/jenkins/workspace/data-search  #cd到项目目录
rm -rf node_modules/  #删除旧依赖
npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver
npm install
npm run build
cd dist
tar -zcvf dist.tar.gz *  #将dist包压缩


cd /usr/share/nginx/html #进入远程服务器的目录
shopt -s extglob #开启extglob模式，开启之后Shell可以另外识别出5个模式匹配操作符
rm -fr !(oraitStatic) #删除除了oraitStatic外的所有其他文件 
shopt -u extglob #关闭extglob模式
scp /var/lib/jenkins/workspace/data-search/dist/dist.tar.gz /usr/share/nginx/html  #把包发送到指定服务器目录
tar -zxvf dist.tar.gz #解压dist文件到当前文件夹
rm -rf dist.tar.gz #删除dist文件
</code></pre>
<p>应用，保存，ok。</p>
]]></content>
    </entry>
</feed>